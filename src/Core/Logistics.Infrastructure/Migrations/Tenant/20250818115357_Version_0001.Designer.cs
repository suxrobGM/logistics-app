// <auto-generated />
using System;
using System.Collections.Generic;
using Logistics.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logistics.Infrastructure.Migrations.Tenant
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20250818115357_Version_0001")]
    partial class Version_0001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logistics.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlobContainer")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("BlobPath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OwnerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Active");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModifiedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.ToTable("Documents", (string)null);

                    b.HasDiscriminator<string>("OwnerType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("SalaryType")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Salary", "Logistics.Domain.Entities.Employee.Salary#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.EmployeeTenantRole", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("EmployeeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRoles", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Number"));

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StripeInvoiceId")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModifiedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LastModifiedBy");

                    b.ComplexProperty<Dictionary<string, object>>("Total", "Logistics.Domain.Entities.Invoice.Total#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Invoices", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Load", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedDispatcherId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedTruckId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanConfirmDelivery")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanConfirmPickUp")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CreatedBy");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DispatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Number"));

                    b.Property<DateTime?>("PickedUpAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TripStopId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModifiedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LastModifiedBy");

                    b.ComplexProperty<Dictionary<string, object>>("DeliveryCost", "Logistics.Domain.Entities.Load.DeliveryCost#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DestinationAddress", "Logistics.Domain.Entities.Load.DestinationAddress#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DestinationLocation", "Logistics.Domain.Entities.Load.DestinationLocation#GeoPoint", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("OriginAddress", "Logistics.Domain.Entities.Load.OriginAddress#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("OriginLocation", "Logistics.Domain.Entities.Load.OriginLocation#GeoPoint", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AssignedDispatcherId");

                    b.HasIndex("AssignedTruckId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TripStopId")
                        .IsUnique();

                    b.ToTable("Loads", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModifiedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LastModifiedBy");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "Logistics.Domain.Entities.Payment.Amount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("BillingAddress", "Logistics.Domain.Entities.Payment.BillingAddress#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("StripePaymentMethodId")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("BillingAddress", "Logistics.Domain.Entities.PaymentMethod.BillingAddress#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("StripePaymentMethodId")
                        .IsUnique();

                    b.ToTable("PaymentMethods", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TenantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TenantRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("DispatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Number"));

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalDistance")
                        .HasColumnType("double precision");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModifiedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LastModifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TruckId");

                    b.ToTable("Trips", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TripStop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArrivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "Logistics.Domain.Entities.TripStop.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Location", "Logistics.Domain.Entities.TripStop.Location#GeoPoint", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");
                        });

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("TripStops", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Truck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MainDriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SecondaryDriverId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("CurrentAddress", "Logistics.Domain.Entities.Truck.CurrentAddress#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("CurrentLocation", "Logistics.Domain.Entities.Truck.CurrentLocation#GeoPoint", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");
                        });

                    b.HasKey("Id");

                    b.HasIndex("MainDriverId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("SecondaryDriverId");

                    b.ToTable("Trucks", (string)null);
                });

            modelBuilder.Entity("Logistics.Shared.Models.CompanyStatsDto", b =>
                {
                    b.Property<int>("DispatchersCount")
                        .HasColumnType("integer");

                    b.Property<int>("DriversCount")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeesCount")
                        .HasColumnType("integer");

                    b.Property<double>("LastMonthDistance")
                        .HasColumnType("double precision");

                    b.Property<decimal>("LastMonthGross")
                        .HasColumnType("numeric");

                    b.Property<double>("LastWeekDistance")
                        .HasColumnType("double precision");

                    b.Property<decimal>("LastWeekGross")
                        .HasColumnType("numeric");

                    b.Property<int>("ManagersCount")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerName")
                        .HasColumnType("text");

                    b.Property<double>("ThisMonthDistance")
                        .HasColumnType("double precision");

                    b.Property<decimal>("ThisMonthGross")
                        .HasColumnType("numeric");

                    b.Property<double>("ThisWeekDistance")
                        .HasColumnType("double precision");

                    b.Property<decimal>("ThisWeekGross")
                        .HasColumnType("numeric");

                    b.Property<double>("TotalDistance")
                        .HasColumnType("double precision");

                    b.Property<decimal>("TotalGross")
                        .HasColumnType("numeric");

                    b.Property<int>("TrucksCount")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Logistics.Shared.Models.TruckStatsDto", b =>
                {
                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<decimal>("DriverShare")
                        .HasColumnType("numeric");

                    b.Property<string>("Drivers")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Gross")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalItems")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("uuid");

                    b.Property<string>("TruckNumber")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.EmployeeDocument", b =>
                {
                    b.HasBaseType("Logistics.Domain.Entities.Document");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.HasIndex("EmployeeId");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.LoadDocument", b =>
                {
                    b.HasBaseType("Logistics.Domain.Entities.Document");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uuid");

                    b.HasIndex("LoadId");

                    b.HasDiscriminator().HasValue("Load");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.LoadInvoice", b =>
                {
                    b.HasBaseType("Logistics.Domain.Entities.Invoice");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LoadId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.PayrollInvoice", b =>
                {
                    b.HasBaseType("Logistics.Domain.Entities.Invoice");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("EmployeeId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.SubscriptionInvoice", b =>
                {
                    b.HasBaseType("Logistics.Domain.Entities.Invoice");

                    b.Property<DateTime>("BillingPeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BillingPeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.BankAccountPaymentMethod", b =>
                {
                    b.HasBaseType("Logistics.Domain.Entities.PaymentMethod");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.CardPaymentMethod", b =>
                {
                    b.HasBaseType("Logistics.Domain.Entities.PaymentMethod");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cvc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("integer");

                    b.Property<int>("ExpYear")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.UsBankAccountPaymentMethod", b =>
                {
                    b.HasBaseType("Logistics.Domain.Entities.PaymentMethod");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AccountHolderType")
                        .HasColumnType("integer");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoutingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VerificationUrl")
                        .HasColumnType("text");

                    b.ToTable("PaymentMethods", t =>
                        {
                            t.Property("AccountHolderName")
                                .HasColumnName("UsBankAccountPaymentMethod_AccountHolderName");

                            t.Property("AccountNumber")
                                .HasColumnName("UsBankAccountPaymentMethod_AccountNumber");

                            t.Property("BankName")
                                .HasColumnName("UsBankAccountPaymentMethod_BankName");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Document", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Employee", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.EmployeeTenantRole", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Domain.Entities.TenantRole", "Role")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Load", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Employee", "AssignedDispatcher")
                        .WithMany("DispatchedLoads")
                        .HasForeignKey("AssignedDispatcherId");

                    b.HasOne("Logistics.Domain.Entities.Truck", "AssignedTruck")
                        .WithMany("Loads")
                        .HasForeignKey("AssignedTruckId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Logistics.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Logistics.Domain.Entities.TripStop", "TripStop")
                        .WithOne("Load")
                        .HasForeignKey("Logistics.Domain.Entities.Load", "TripStopId");

                    b.Navigation("AssignedDispatcher");

                    b.Navigation("AssignedTruck");

                    b.Navigation("Customer");

                    b.Navigation("TripStop");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Invoice", null)
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TenantRoleClaim", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.TenantRole", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Trip", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Truck", "Truck")
                        .WithMany("Trips")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TripStop", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Trip", "Trip")
                        .WithMany("Stops")
                        .HasForeignKey("TripId")
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Truck", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Employee", "MainDriver")
                        .WithMany()
                        .HasForeignKey("MainDriverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Logistics.Domain.Entities.Employee", "SecondaryDriver")
                        .WithMany()
                        .HasForeignKey("SecondaryDriverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MainDriver");

                    b.Navigation("SecondaryDriver");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.EmployeeDocument", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Employee", "Employee")
                        .WithMany("Documents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.LoadDocument", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Load", "Load")
                        .WithMany("Documents")
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Load");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.LoadInvoice", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Domain.Entities.Load", "Load")
                        .WithMany("Invoices")
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Load");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.PayrollInvoice", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Employee", "Employee")
                        .WithMany("PayrollInvoices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Employee", b =>
                {
                    b.Navigation("DispatchedLoads");

                    b.Navigation("Documents");

                    b.Navigation("EmployeeRoles");

                    b.Navigation("PayrollInvoices");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Load", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TenantRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("EmployeeRoles");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Trip", b =>
                {
                    b.Navigation("Stops");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TripStop", b =>
                {
                    b.Navigation("Load")
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Truck", b =>
                {
                    b.Navigation("Loads");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
